{"version":3,"sources":["webpack://weather-app/./src/index.js"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,MAAM;AACzB;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA,oBAAoB;;AAEpB;AACA;;AAEA;AACA;;AAEA;AACA,kCAAkC,mBAAmB,IAAI,qBAAqB;;AAE9E;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,oGAAoG,IAAI,GAAG,KAAK;AAChH,yIAAyI,IAAI,OAAO,KAAK;;AAEzJ,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA,OAAO;AACP,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,kGAAkG,eAAe;AACjH,oBAAoB,eAAe;AACnC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA","file":"main.js","sourcesContent":["/* eslint-disable no-constant-condition */\n/* eslint-disable no-use-before-define */\n// CONST AND VARIABLES--------------------------------------------\nlet long;\nlet lat;\nlet currentTemp;\nlet currentDescription;\nlet currentTimezone;\nlet currentCode;\nconst temperatureDescription = document.querySelector('.temperature-description');\nconst temperatureDegree = document.querySelector('.temperature-degree');\nconst locationTimezone = document.querySelector('.location-timezone');\nconst searchBox = document.querySelector('#searchLocation');\nconst submitBtn = document.querySelector('#submitBtn');\n\n// FUNCTIONS------------------------------------------------------\nfunction setIcons(code, iconID) {\n  // eslint-disable-next-line no-undef\n  const skycons = new Skycons({ color: 'white' });\n  // MATCHING API ICON NAMES WITH SKYCONS\n  let icon;\n\n  const clearCodes = [1000];\n  const cloudyCodes = [1003, 1006, 1009];\n  const rainCodes = [1066, 1114, 1117, 1210, 1213, 1216, 1219, 1222, 1225, 1255, 1258, 1279, 1282];\n  const snowCodes = [1066, 1114, 1117, 1210, 1213, 1216, 1219, 1222, 1225, 1255, 1258, 1279, 1282];\n  const fogCodes = [1147, 1030, 1135];\n  const hailCodes = [1237, 1261, 1264];\n  const sleetCodes = [1069, 1072, 1168, 1171, 1204, 1207, 1249, 1252];\n  const thunderCodes = [1087];\n  const thunderShowerNightCodes = [1273, 1276];\n\n  if (clearCodes.includes(code)) {\n    icon = 'clear_day';\n  // } else if (code === 1003 , code === 1006 , code === 1009) {\n  //   icon = 'cloudy';\n  } else if (cloudyCodes.includes(code)) {\n    icon = 'cloudy';\n    console.log('hello');\n  } else if (rainCodes.includes(code)) {\n    icon = 'rain';\n  } else if (snowCodes.includes(code)) {\n    icon = 'snow';\n  } else if (fogCodes.includes(code)) {\n    icon = 'fog';\n  } else if (hailCodes.includes(code)) {\n    icon = 'hail';\n  } else if (sleetCodes.includes(code)) {\n    icon = 'sleet';\n  } else if (thunderCodes.includes(code)) {\n    icon = 'thunder';\n  } else if (thunderShowerNightCodes.includes(code)) {\n    icon = 'thunder-showers-night';\n  }\n\n  const currentSkycon = icon.replace(/ /g, '_').toUpperCase();\n  skycons.play();\n  // eslint-disable-next-line no-undef\n  return skycons.set(iconID, Skycons[currentSkycon]);\n}\nfunction getCoordinates(resolve, reject) {\n  // three parameters for getCurrentPosition.  First one is success parameter.\n  if (navigator.geolocation) {\n    console.log('1');\n    navigator.geolocation.getCurrentPosition((position) => {\n      long = position.coords.longitude;\n      lat = position.coords.latitude;\n      console.log({ long });\n      console.log({ lat });\n      resolve('success');\n    });\n  } else if (!navigator.geolocation) {\n    reject(Error);\n  }\n}\nfunction submitLocation() {\n  const searchLocation = searchBox.value;\n  console.log({ searchLocation });\n  return searchLocation;\n}\nfunction displayWeather(data) {\n  console.log(data); // to check format of data being returned.\n\n  currentTemp = data.current.temp_f;\n  temperatureDegree.innerHTML = Math.floor(currentTemp);\n\n  currentDescription = data.current.condition.text;\n  temperatureDescription.innerHTML = currentDescription;\n\n  currentTimezone = data.name;\n  locationTimezone.innerHTML = `${data.location.name}, ${data.location.region}`;\n\n  currentCode = data.current.condition.code;\n}\nasync function fetchWeatherByCoordinates() {\n  // GETTING COORDINATES REQUIRES BROWSER INPUT. DOES IT BECOME ASYNCHRONOUS?\n  const promise = new Promise((resolve, reject) => {\n    getCoordinates(resolve, reject);\n  });\n\n  await promise.then(() => {\n    const api = `https://api.weatherapi.com/v1/current.json?key=f13b839821d04f97bf1145422211802&q=${lat},${long}`;\n    // THIS MAY BE NEEDED FOR HOURLY OR FORECASTED WEATHER IF NEEDED. const api = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${long}&exclude=hourly,daily&appid=7250132cebfb608efae470e5b346fac0`;\n\n    fetch(api, { mode: 'cors' })\n      .then((response) => response.json()) // unpackage JSON API file\n      .then((data) => {\n        displayWeather(data);\n        setIcons(currentCode, document.querySelector('.icon'));\n      });\n  })\n    .catch((message) => {\n      setTimeout(() => console.log(message), 1000);\n    });\n}\nasync function fetchWeatherByLocation(e) {\n  e.preventDefault();\n  const searchLocation = submitLocation();\n  const api = `https://api.weatherapi.com/v1/current.json?key=f13b839821d04f97bf1145422211802&q=${searchLocation}`;\n  await fetch(api, { mode: 'cors' })\n    .then((response) => response.json())\n    .then((data) => {\n      console.log(data);\n      displayWeather(data);\n      setIcons(currentCode, document.querySelector('.icon'));\n    });\n}\n// SCRIPT---------------------------------------------------------\nwindow.onload = () => {\n  fetchWeatherByCoordinates();\n  submitBtn.addEventListener('click', fetchWeatherByLocation);\n};\n"],"sourceRoot":""}
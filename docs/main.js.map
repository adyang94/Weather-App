{"version":3,"sources":["webpack://weather-app/./src/index.js"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,MAAM;AACzB;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,uEAAuE,IAAI,OAAO,KAAK;AACvF,yIAAyI,IAAI,OAAO,KAAK;;AAEzJ,gBAAgB,eAAe;AAC/B;AACA;AACA,0BAA0B;;AAE1B;AACA;;AAEA;AACA;;AAEA;AACA,wCAAwC,gBAAgB;;AAExD;AACA;AACA,OAAO;AACP,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA","file":"main.js","sourcesContent":["/* eslint-disable no-use-before-define */\n// CONST AND VARIABLES--------------------------------------------\nlet long;\nlet lat;\nlet currentTemp;\nlet currentDescription;\nlet currentTimezone;\nlet currentIcon;\nconst temperatureDescription = document.querySelector('.temperature-description');\nconst temperatureDegree = document.querySelector('.temperature-degree');\nconst locationTimezone = document.querySelector('.location-timezone');\nconst searchLocation = document.querySelector('#searchLocation');\nconst submitBtn = document.querySelector('#submitBtn');\n// FUNCTIONS------------------------------------------------------\nfunction setIcons(icon, iconID) {\n  const skycons = new Skycons({ color: 'white' });\n  // MATCHING API ICON NAMES WITH SKYCONS\n  if (icon === 'Clear') {\n    icon = 'clear_day';\n  } else if (icon === 'Clouds') {\n    icon = 'cloudy';\n  }\n  const currentSkycon = icon.replace(/ /g, '_').toUpperCase();\n  console.log(currentSkycon);\n  skycons.play();\n  // eslint-disable-next-line no-undef\n  return skycons.set(iconID, Skycons[currentSkycon]);\n}\nfunction getCoordinates(resolve, reject) {\n  // three parameters for getCurrentPosition.  First one is success parameter.\n  if (navigator.geolocation) {\n    console.log('1');\n    navigator.geolocation.getCurrentPosition((position) => {\n      long = position.coords.longitude;\n      lat = position.coords.latitude;\n      console.log({ long });\n      console.log({ lat });\n      resolve('success');\n    });\n  } else if (!navigator.geolocation) {\n    reject(Error);\n  }\n}\n\nasync function fetchWeatherByCoordinates() {\n  // GET COORDINATES\n  const promise = new Promise((resolve, reject) => {\n    getCoordinates(resolve, reject);\n  });\n\n  await promise.then(() => {\n    const api = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&exclude=hourly,daily&appid=7250132cebfb608efae470e5b346fac0`;\n    // THIS MAY BE NEEDED FOR HOURLY OR FORECASTED WEATHER IF NEEDED. const api = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${long}&exclude=hourly,daily&appid=7250132cebfb608efae470e5b346fac0`;\n\n    fetch(api, { mode: 'cors' })\n      .then((response) => response.json()) // unpackage JSON API file\n      .then((data) => {\n        console.log(data); // to check format of data being returned.\n\n        currentTemp = (data.main.temp - 273) * (9 / 5) + 32;\n        temperatureDegree.innerHTML = Math.floor(currentTemp);\n\n        currentDescription = data.weather[0].description;\n        temperatureDescription.innerHTML = currentDescription;\n\n        currentTimezone = data.name;\n        locationTimezone.innerHTML = `${currentTimezone}`;\n\n        currentIcon = data.weather[0].main;\n        setIcons(currentIcon, document.querySelector('.icon'));\n      });\n  })\n    .catch((message) => {\n      setTimeout(() => console.log(message), 1000);\n    });\n}\nfunction fetchWeatherByLocation() {\n\n}\n// SCRIPT---------------------------------------------------------\nwindow.onload = () => {\n  fetchWeatherByCoordinates();\n};\n\n// SET ICON\n"],"sourceRoot":""}